from faster_whisper import WhisperModel
import time
import os
import pyaudio
import wave
import warnings

# Ignore all warnings to clean up output
warnings.filterwarnings("ignore")

##############################################################################
# C·∫§U H√åNH M·∫∂C ƒê·ªäNH - NG∆Ø·ªúI D√ôNG C√ì TH·ªÇ THAY ƒê·ªîI C√ÅC THAM S·ªê SAU:
##############################################################################

# 1. CH·ªåN MODEL (tiny, base, small, medium, large-v2, large-v3)
# - tiny: nh·ªè nh·∫•t, nhanh nh·∫•t, ƒë·ªô ch√≠nh x√°c th·∫•p
# - base: c√¢n b·∫±ng gi·ªØa t·ªëc ƒë·ªô v√† ƒë·ªô ch√≠nh x√°c
# - small: t·ªët cho h·∫ßu h·∫øt tr∆∞·ªùng h·ª£p
# - medium: ch√≠nh x√°c h∆°n nh∆∞ng ch·∫≠m h∆°n
# - large-v2/large-v3: ch√≠nh x√°c nh·∫•t nh∆∞ng ch·∫≠m v√† y√™u c·∫ßu nhi·ªÅu t√†i nguy√™n
MODEL_SIZE = "large-v3"

# 2. CH·ªåN THI·∫æT B·ªä ("cpu" ho·∫∑c "cuda" n·∫øu c√≥ GPU)
DEVICE = "cuda"

# 3. CH·ªåN LO·∫†I T√çNH TO√ÅN
# C√°c l·ª±a ch·ªçn cho GPU:
# - "int8_float16" (t·ªët nh·∫•t cho t·ªëc ƒë·ªô/ƒë·ªô ch√≠nh x√°c)
# - "float16" (an to√†n n·∫øu g·∫∑p l·ªói v·ªõi int8_float16)
# - "float32" (ch√≠nh x√°c nh·∫•t nh∆∞ng ch·∫≠m)
# Cho CPU ch·ªâ n√™n d√πng "int8" ho·∫∑c "float32"
COMPUTE_TYPE = "int8" if DEVICE == "cpu" else "int8_float16"

# 4. TH·ªúI GIAN GHI √ÇM T·ª™ MICRO (gi√¢y)
RECORD_DURATION = 10  # C√≥ th·ªÉ ƒëi·ªÅu ch·ªânh theo nhu c·∫ßu

# 5. T√äN FILE √ÇM THANH T·∫†M TH·ªúI
TEMP_AUDIO_PATH = "temp_recording.wav"

# 6. C√ÄI ƒê·∫∂T BEAM SIZE (k√≠ch th∆∞·ªõc ch√πm t√¨m ki·∫øm)
# Gi√° tr·ªã l·ªõn h∆°n cho k·∫øt qu·∫£ ch√≠nh x√°c h∆°n nh∆∞ng t·ªën t√†i nguy√™n
BEAM_SIZE = 5

# 7. TH∆Ø M·ª§C L∆ØU MODEL
MODEL_DIR = "models"

# 8. C·∫§U H√åNG GHI √ÇM
SAMPLE_RATE = 16000  # Whisper ho·∫°t ƒë·ªông t·ªët nh·∫•t v·ªõi 16kHz
CHANNELS = 1  # Mono
FORMAT = pyaudio.paInt16  # ƒê·ªãnh d·∫°ng 16-bit PCM


##############################################################################
# H√ÄM GHI √ÇM T·ª™ MICRO
##############################################################################

def record_from_mic(duration=RECORD_DURATION, output_path=TEMP_AUDIO_PATH):
    """Ghi √¢m t·ª´ microphone v√† l∆∞u ra file WAV t·∫°m th·ªùi

    Args:
        duration (int): Th·ªùi gian ghi √¢m (gi√¢y)
        output_path (str): ƒê∆∞·ªùng d·∫´n file output

    Returns:
        str: ƒê∆∞·ªùng d·∫´n file ƒë√£ ghi
    """
    p = pyaudio.PyAudio()

    try:
        stream = p.open(format=FORMAT,
                        channels=CHANNELS,
                        rate=SAMPLE_RATE,
                        input=True,
                        frames_per_buffer=1024)

        print(f"\nüé§ ƒêang ghi √¢m trong {duration} gi√¢y... (Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng s·ªõm)")
        frames = []

        try:
            for _ in range(0, int(SAMPLE_RATE / 1024 * duration)):
                data = stream.read(1024)
                frames.append(data)
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è D·ª´ng ghi √¢m s·ªõm theo y√™u c·∫ßu")

        print("‚úÖ Ho√†n th√†nh ghi √¢m")

        # L∆∞u file √¢m thanh
        with wave.open(output_path, 'wb') as wf:
            wf.setnchannels(CHANNELS)
            wf.setsampwidth(p.get_sample_size(FORMAT))
            wf.setframerate(SAMPLE_RATE)
            wf.writeframes(b''.join(frames))

        return output_path

    finally:
        stream.stop_stream()
        stream.close()
        p.terminate()


##############################################################################
# KH·ªûI T·∫†O MODEL V√Ä X·ª¨ L√ù AUDIO
##############################################################################

def load_model():
    """Kh·ªüi t·∫°o model Whisper v·ªõi c·∫•u h√¨nh ƒë√£ ch·ªçn

    Returns:
        WhisperModel: Model ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
    """
    # T·∫°o th∆∞ m·ª•c models n·∫øu ch∆∞a t·ªìn t·∫°i
    os.makedirs(MODEL_DIR, exist_ok=True)

    # Kh·ªüi t·∫°o model v·ªõi c·∫•u h√¨nh ƒë√£ ch·ªçn
    try:
        if DEVICE == "cpu":
            model = WhisperModel(
                MODEL_SIZE,
                device=DEVICE,
                compute_type=COMPUTE_TYPE,
                cpu_threads=os.cpu_count() or 4,  # S·ª≠ d·ª•ng t·∫•t c·∫£ core CPU
                num_workers=4,
                download_root=MODEL_DIR
            )
        else:
            model = WhisperModel(
                MODEL_SIZE,
                device=DEVICE,
                compute_type=COMPUTE_TYPE,
                download_root=MODEL_DIR
            )


        return model

    except Exception as e:
        print(f"‚ùå L·ªói khi kh·ªüi t·∫°o model: {str(e)}")
        print("üîÑ ƒêang th·ª≠ d√πng float16 thay cho int8_float16...")
        # Fallback n·∫øu int8_float16 kh√¥ng ho·∫°t ƒë·ªông

def main():
    """H√†m ch√≠nh th·ª±c hi·ªán ghi √¢m v√† chuy·ªÉn ƒë·ªïi gi·ªçng n√≥i"""
    try:
        # Load model
        print("\nüîç ƒêang t·∫£i model...")
        model = load_model()

        # Ghi √¢m t·ª´ micro
        audio_path = record_from_mic()
        print(audio_path)
        # X·ª≠ l√Ω chuy·ªÉn ƒë·ªïi
        print("\nüîä ƒêang chuy·ªÉn ƒë·ªïi gi·ªçng n√≥i th√†nh vƒÉn b·∫£n...")
        start_time = time.time()

        segments, info = model.transcribe(
            audio_path,
            language="vi",
            beam_size=BEAM_SIZE,
            vad_filter=True,  # T·ª± ƒë·ªông l·ªçc kho·∫£ng l·∫∑ng
            without_timestamps=True  # B·ªè th·ªùi gian n·∫øu kh√¥ng c·∫ßn
        )

        # In k·∫øt qu·∫£
        print("\nüìù K·∫øt qu·∫£:")
        full_text = []
        for segment in segments:
            print(f"- {segment.text}")
            full_text.append(segment.text)

        # T√≠nh th·ªùi gian x·ª≠ l√Ω
        end_time = time.time()
        execution_time = end_time - start_time
        audio_duration = info.duration
        real_time_factor = execution_time / audio_duration

        print(f"\n‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω: {execution_time:.2f}s cho {audio_duration:.2f}s √¢m thanh")
        print(f"‚ö° T·ªëc ƒë·ªô x·ª≠ l√Ω: {real_time_factor:.2f}x th·ªùi gian th·ª±c")

        # X√≥a file t·∫°m
        if os.path.exists(audio_path):
            os.remove(audio_path)

    except Exception as e:
        print(f"‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}")
    finally:
        print(f"\nüíæ Model ƒë∆∞·ª£c l∆∞u t·∫°i: {os.path.abspath(MODEL_DIR)}")


if __name__ == "__main__":
    main()